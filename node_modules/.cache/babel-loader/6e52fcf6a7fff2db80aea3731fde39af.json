{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCurrency } from 'hooks/Tokens';\nimport { useTradeExactIn } from 'hooks/Trades';\nimport { tryParseAmount } from 'state/swap/hooks';\n\nconst useGetCakeBusdLpPrice = () => {\n  _s();\n\n  const cakeAddress = '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82';\n  const busdAddress = '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56';\n  const inputCurrency = useCurrency(cakeAddress);\n  const outputCurrency = useCurrency(busdAddress);\n  const parsedAmount = tryParseAmount('1', inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined);\n  const bestTradeExactIn = useTradeExactIn(parsedAmount, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const price = bestTradeExactIn === null || bestTradeExactIn === void 0 ? void 0 : bestTradeExactIn.executionPrice.toSignificant(6);\n  return price ? parseFloat(price) : undefined;\n};\n\n_s(useGetCakeBusdLpPrice, \"pUgQ4C5GfX+dSzwXPw6KNhFBcv8=\", false, function () {\n  return [useCurrency, useCurrency, useTradeExactIn];\n});\n\nexport default useGetCakeBusdLpPrice;","map":{"version":3,"sources":["/home/marc/workspace/EatTheBlocks/pancake-swap-exchange/pancake-swap-exchange-testnet/src/utils/useGetCakeBusdLpPrice.ts"],"names":["useCurrency","useTradeExactIn","tryParseAmount","useGetCakeBusdLpPrice","cakeAddress","busdAddress","inputCurrency","outputCurrency","parsedAmount","undefined","bestTradeExactIn","price","executionPrice","toSignificant","parseFloat"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAMC,WAAW,GAAG,4CAApB;AACA,QAAMC,WAAW,GAAG,4CAApB;AACA,QAAMC,aAAa,GAAGN,WAAW,CAACI,WAAD,CAAjC;AACA,QAAMG,cAAc,GAAGP,WAAW,CAACK,WAAD,CAAlC;AACA,QAAMG,YAAY,GAAGN,cAAc,CAAC,GAAD,EAAMI,aAAN,aAAMA,aAAN,cAAMA,aAAN,GAAuBG,SAAvB,CAAnC;AACA,QAAMC,gBAAgB,GAAGT,eAAe,CAACO,YAAD,EAAeD,cAAf,aAAeA,cAAf,cAAeA,cAAf,GAAiCE,SAAjC,CAAxC;AACA,QAAME,KAAK,GAAGD,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEE,cAAlB,CAAiCC,aAAjC,CAA+C,CAA/C,CAAd;AACA,SAAOF,KAAK,GAAGG,UAAU,CAACH,KAAD,CAAb,GAAuBF,SAAnC;AACD,CATD;;GAAMN,qB;UAGkBH,W,EACCA,W,EAEEC,e;;;AAK3B,eAAeE,qBAAf","sourcesContent":["import { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn } from 'hooks/Trades'\nimport { tryParseAmount } from 'state/swap/hooks'\n\nconst useGetCakeBusdLpPrice = () => {\n  const cakeAddress = '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82'\n  const busdAddress = '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56'\n  const inputCurrency = useCurrency(cakeAddress)\n  const outputCurrency = useCurrency(busdAddress)\n  const parsedAmount = tryParseAmount('1', inputCurrency ?? undefined)\n  const bestTradeExactIn = useTradeExactIn(parsedAmount, outputCurrency ?? undefined)\n  const price = bestTradeExactIn?.executionPrice.toSignificant(6)\n  return price ? parseFloat(price) : undefined\n}\n\nexport default useGetCakeBusdLpPrice\n"]},"metadata":{},"sourceType":"module"}